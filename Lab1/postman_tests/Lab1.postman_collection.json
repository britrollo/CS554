{
	"info": {
		"_postman_id": "994bdaff-903b-4208-a8ab-8a5f132ea2f9",
		"name": "Lab1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "all tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get all tasks: Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get all tasks: has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/tasks",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "task by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Get task by id: Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get task by id: Expected result id\", function () {",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/tasks/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new task",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Test task 1\",\n    \"description\": \"This is the first test task\",\n    \"hoursEstimated\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/tasks",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update all task data by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update task by id: Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Update task by id: Estimated hours updated\", function () {",
							"    pm.expect(jsonData.hoursEstimated).to.eql(2)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Test task 1\",\n    \"description\": \"This is the first test task\",\n    \"hoursEstimated\": 1,\n    \"completed\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/tasks/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update provided task data by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update provided task data by id: Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Update provided task data by id: description updated\", function () {",
							"    pm.expect(jsonData.description).to.eql(\"This is the first test task updated\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"This is the first test task updated\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/tasks/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add comment to task by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Add comment to task by id: Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.environment.set(\"comment_id\", jsonData.id);",
							"});",
							"",
							"pm.test(\"Add comment to task by id: Added comment\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"astro\",\n    \"comment\":\"great new comment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/tasks/{{id}}/comments",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"tasks",
						"{{id}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comment by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var res = pm.response.text();",
							"",
							"pm.test(\"Delete comment by id: Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Delete comment by id: Response message\", function () {",
							"    pm.expect(res).to.eql(\"The comment was deleted\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/tasks/{{id}}/{{comment_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"tasks",
						"{{id}}",
						"{{comment_id}}"
					]
				}
			},
			"response": []
		}
	]
}